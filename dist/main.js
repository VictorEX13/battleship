(()=>{"use strict";var r={756:(r,e,n)=>{n.d(e,{Z:()=>u});var t=n(537),o=n.n(t),a=n(645),i=n.n(a),s=n(667),c=n.n(s),d=new URL(n(172),n.b),l=i()(o()),A=c()(d);l.push([r.id,"/* General Rules */\r\n\r\n@font-face {\r\n    font-family: 'PressStart2P';\r\n    src: url("+A+') format(\'truetype\');\r\n}\r\n\r\n*,\r\n*::before,\r\n*::after {\r\n    box-sizing: border-box;\r\n\r\n    font-family: \'PressStart2P\';\r\n\r\n    padding: 0;\r\n    margin: 0;\r\n}\r\n\r\n:root {\r\n    font-size: 10px;\r\n    --main-color: rgb(0, 27, 177);\r\n    --sub-color: rgb(100, 100, 100);\r\n}\r\n\r\nh1 {\r\n    font-size: 3rem;\r\n}\r\n\r\n/* Blocks */\r\n\r\nbody {\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    height: 100vh;\r\n    width: 100vw;\r\n}\r\n\r\nheader {\r\n    display: flex;\r\n    align-items: center;\r\n    flex: 1;\r\n\r\n    color: var(--main-color);\r\n    background-color: var(--sub-color);\r\n\r\n    padding: 0 2%;\r\n}\r\n\r\nmain {\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex: 8.5;\r\n\r\n    background-color: rgb(29, 29, 29);\r\n}\r\n\r\n    .main-display {\r\n        display: flex;\r\n        justify-content: space-around;\r\n        align-items: center;\r\n        flex: 8.5;\r\n\r\n        padding: 7.5% 0;\r\n    }\r\n\r\n        .config {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            flex: 0.4;\r\n            gap: 5%;\r\n        }\r\n\r\n            .config-board {\r\n                flex: 1\r\n            }\r\n\r\n            .config-controls {\r\n                display: flex;\r\n                flex-direction: column;\r\n                gap: 5%;\r\n            }\r\n\r\n    .controller {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        flex: 1.5;\r\n    }\r\n\r\nfooter {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex: 0.5;\r\n\r\n    color: var(--main-color);\r\n    background-color: var(--sub-color);\r\n}\r\n\r\n/* Elements */\r\n\r\n.board {\r\n    display: grid;\r\n    grid-template: repeat(10,1fr) / repeat(10,1fr);\r\n\r\n    height: 100%;\r\n    aspect-ratio: 1/1;\r\n}\r\n\r\n.board-field {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    font-size: 2.4rem;\r\n\r\n    background-color: rgb(9, 145, 199);\r\n\r\n    border: 1px solid var(--main-color);\r\n}\r\n\r\nbutton {\r\n    padding: 1.5rem;\r\n}\r\n\r\n/* Modifiers */\r\n\r\n.board:not(.board[under-attack]),\r\n.board-field[hit="true"] {\r\n    pointer-events: none;\r\n}\r\n\r\n.board-field[hit="true"][has-ship="false"]::after {\r\n    content: \'x\';\r\n}\r\n\r\n.board-field[hit="true"][has-ship="true"] {\r\n    background-color: rgb(170, 0, 0);\r\n}\r\n\r\n.player-board .board-field[hit="false"][has-ship="true"],\r\n.config-board .board-field[has-ship="true"] {\r\n    background-color: rgb(0, 237, 103);\r\n}\r\n\r\n.comp-board .board-field[hit="false"]:hover {\r\n    cursor: crosshair;\r\n}\r\n\r\n.board:not(.board[under-attack]),\r\n.comp-board .board-field[hit="false"]:hover,\r\nbutton:not(button[disabled]):hover {\r\n    opacity: 0.7;\r\n}\r\n\r\n.winning-message {\r\n    font-size: 3rem;\r\n\r\n    color: white;\r\n}',"",{version:3,sources:["webpack://./src/styles/main.css"],names:[],mappings:"AAAA,kBAAkB;;AAElB;IACI,2BAA2B;IAC3B,+DAAmE;AACvE;;AAEA;;;IAGI,sBAAsB;;IAEtB,2BAA2B;;IAE3B,UAAU;IACV,SAAS;AACb;;AAEA;IACI,eAAe;IACf,6BAA6B;IAC7B,+BAA+B;AACnC;;AAEA;IACI,eAAe;AACnB;;AAEA,WAAW;;AAEX;IACI,aAAa;IACb,sBAAsB;;IAEtB,aAAa;IACb,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,OAAO;;IAEP,wBAAwB;IACxB,kCAAkC;;IAElC,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;;IAET,iCAAiC;AACrC;;IAEI;QACI,aAAa;QACb,6BAA6B;QAC7B,mBAAmB;QACnB,SAAS;;QAET,eAAe;IACnB;;QAEI;YACI,aAAa;YACb,8BAA8B;YAC9B,SAAS;YACT,OAAO;QACX;;YAEI;gBACI;YACJ;;YAEA;gBACI,aAAa;gBACb,sBAAsB;gBACtB,OAAO;YACX;;IAER;QACI,aAAa;QACb,uBAAuB;QACvB,mBAAmB;QACnB,SAAS;IACb;;AAEJ;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,SAAS;;IAET,wBAAwB;IACxB,kCAAkC;AACtC;;AAEA,aAAa;;AAEb;IACI,aAAa;IACb,8CAA8C;;IAE9C,YAAY;IACZ,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;;IAEnB,iBAAiB;;IAEjB,kCAAkC;;IAElC,mCAAmC;AACvC;;AAEA;IACI,eAAe;AACnB;;AAEA,cAAc;;AAEd;;IAEI,oBAAoB;AACxB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,gCAAgC;AACpC;;AAEA;;IAEI,kCAAkC;AACtC;;AAEA;IACI,iBAAiB;AACrB;;AAEA;;;IAGI,YAAY;AAChB;;AAEA;IACI,eAAe;;IAEf,YAAY;AAChB",sourcesContent:['/* General Rules */\r\n\r\n@font-face {\r\n    font-family: \'PressStart2P\';\r\n    src: url(\'./../assets/PressStart2P-Regular.ttf\') format(\'truetype\');\r\n}\r\n\r\n*,\r\n*::before,\r\n*::after {\r\n    box-sizing: border-box;\r\n\r\n    font-family: \'PressStart2P\';\r\n\r\n    padding: 0;\r\n    margin: 0;\r\n}\r\n\r\n:root {\r\n    font-size: 10px;\r\n    --main-color: rgb(0, 27, 177);\r\n    --sub-color: rgb(100, 100, 100);\r\n}\r\n\r\nh1 {\r\n    font-size: 3rem;\r\n}\r\n\r\n/* Blocks */\r\n\r\nbody {\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    height: 100vh;\r\n    width: 100vw;\r\n}\r\n\r\nheader {\r\n    display: flex;\r\n    align-items: center;\r\n    flex: 1;\r\n\r\n    color: var(--main-color);\r\n    background-color: var(--sub-color);\r\n\r\n    padding: 0 2%;\r\n}\r\n\r\nmain {\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex: 8.5;\r\n\r\n    background-color: rgb(29, 29, 29);\r\n}\r\n\r\n    .main-display {\r\n        display: flex;\r\n        justify-content: space-around;\r\n        align-items: center;\r\n        flex: 8.5;\r\n\r\n        padding: 7.5% 0;\r\n    }\r\n\r\n        .config {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            flex: 0.4;\r\n            gap: 5%;\r\n        }\r\n\r\n            .config-board {\r\n                flex: 1\r\n            }\r\n\r\n            .config-controls {\r\n                display: flex;\r\n                flex-direction: column;\r\n                gap: 5%;\r\n            }\r\n\r\n    .controller {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        flex: 1.5;\r\n    }\r\n\r\nfooter {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex: 0.5;\r\n\r\n    color: var(--main-color);\r\n    background-color: var(--sub-color);\r\n}\r\n\r\n/* Elements */\r\n\r\n.board {\r\n    display: grid;\r\n    grid-template: repeat(10,1fr) / repeat(10,1fr);\r\n\r\n    height: 100%;\r\n    aspect-ratio: 1/1;\r\n}\r\n\r\n.board-field {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    font-size: 2.4rem;\r\n\r\n    background-color: rgb(9, 145, 199);\r\n\r\n    border: 1px solid var(--main-color);\r\n}\r\n\r\nbutton {\r\n    padding: 1.5rem;\r\n}\r\n\r\n/* Modifiers */\r\n\r\n.board:not(.board[under-attack]),\r\n.board-field[hit="true"] {\r\n    pointer-events: none;\r\n}\r\n\r\n.board-field[hit="true"][has-ship="false"]::after {\r\n    content: \'x\';\r\n}\r\n\r\n.board-field[hit="true"][has-ship="true"] {\r\n    background-color: rgb(170, 0, 0);\r\n}\r\n\r\n.player-board .board-field[hit="false"][has-ship="true"],\r\n.config-board .board-field[has-ship="true"] {\r\n    background-color: rgb(0, 237, 103);\r\n}\r\n\r\n.comp-board .board-field[hit="false"]:hover {\r\n    cursor: crosshair;\r\n}\r\n\r\n.board:not(.board[under-attack]),\r\n.comp-board .board-field[hit="false"]:hover,\r\nbutton:not(button[disabled]):hover {\r\n    opacity: 0.7;\r\n}\r\n\r\n.winning-message {\r\n    font-size: 3rem;\r\n\r\n    color: white;\r\n}'],sourceRoot:""}]);const u=l},645:r=>{r.exports=function(r){var e=[];return e.toString=function(){return this.map((function(e){var n="",t=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),t&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=r(e),t&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(r,n,t,o,a){"string"==typeof r&&(r=[[null,r,void 0]]);var i={};if(t)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var d=0;d<r.length;d++){var l=[].concat(r[d]);t&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},667:r=>{r.exports=function(r,e){return e||(e={}),r?(r=String(r.__esModule?r.default:r),/^['"].*['"]$/.test(r)&&(r=r.slice(1,-1)),e.hash&&(r+=e.hash),/["'() \t\n]|(%20)/.test(r)||e.needQuotes?'"'.concat(r.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):r):r}},537:r=>{r.exports=function(r){var e=r[1],n=r[3];if(!n)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:r=>{var e=[];function n(r){for(var n=-1,t=0;t<e.length;t++)if(e[t].identifier===r){n=t;break}return n}function t(r,t){for(var a={},i=[],s=0;s<r.length;s++){var c=r[s],d=t.base?c[0]+t.base:c[0],l=a[d]||0,A="".concat(d," ").concat(l);a[d]=l+1;var u=n(A),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var h=o(p,t);t.byIndex=s,e.splice(s,0,{identifier:A,updater:h,references:1})}i.push(A)}return i}function o(r,e){var n=e.domAPI(e);return n.update(r),function(e){if(e){if(e.css===r.css&&e.media===r.media&&e.sourceMap===r.sourceMap&&e.supports===r.supports&&e.layer===r.layer)return;n.update(r=e)}else n.remove()}}r.exports=function(r,o){var a=t(r=r||[],o=o||{});return function(r){r=r||[];for(var i=0;i<a.length;i++){var s=n(a[i]);e[s].references--}for(var c=t(r,o),d=0;d<a.length;d++){var l=n(a[d]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=c}}},569:r=>{var e={};r.exports=function(r,n){var t=function(r){if(void 0===e[r]){var n=document.querySelector(r);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(r){n=null}e[r]=n}return e[r]}(r);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(n)}},216:r=>{r.exports=function(r){var e=document.createElement("style");return r.setAttributes(e,r.attributes),r.insert(e,r.options),e}},565:(r,e,n)=>{r.exports=function(r){var e=n.nc;e&&r.setAttribute("nonce",e)}},795:r=>{r.exports=function(r){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=r.insertStyleElement(r);return{update:function(n){!function(r,e,n){var t="";n.supports&&(t+="@supports (".concat(n.supports,") {")),n.media&&(t+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(t+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),t+=n.css,o&&(t+="}"),n.media&&(t+="}"),n.supports&&(t+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(t,r,e.options)}(e,r,n)},remove:function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(e)}}}},589:r=>{r.exports=function(r,e){if(e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}},172:(r,e,n)=>{r.exports=n.p+"c4f6a3d49cd1dd4f5ca8.ttf"}},e={};function n(t){var o=e[t];if(void 0!==o)return o.exports;var a=e[t]={id:t,exports:{}};return r[t](a,a.exports,n),a.exports}n.m=r,n.n=r=>{var e=r&&r.__esModule?()=>r.default:()=>r;return n.d(e,{a:e}),e},n.d=(r,e)=>{for(var t in e)n.o(e,t)&&!n.o(r,t)&&Object.defineProperty(r,t,{enumerable:!0,get:e[t]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(r){if("object"==typeof window)return window}}(),n.o=(r,e)=>Object.prototype.hasOwnProperty.call(r,e),(()=>{var r;n.g.importScripts&&(r=n.g.location+"");var e=n.g.document;if(!r&&e&&(e.currentScript&&(r=e.currentScript.src),!r)){var t=e.getElementsByTagName("script");t.length&&(r=t[t.length-1].src)}if(!r)throw new Error("Automatic publicPath is not supported in this browser");r=r.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=r})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{const r=()=>{const r=document.querySelector("body"),e=r=>{const e=document.querySelector(".main-display"),t=document.createElement("div"),o=document.createElement("div"),a=document.createElement("div"),i=document.querySelector(".start");t.classList.add("config"),o.classList.add("config-controls"),a.classList.add("ships");const s=document.createElement("button"),c=document.createElement("button");c.toggleAttribute("disabled"),s.textContent="Random",c.textContent="Clear",s.addEventListener("click",(()=>{r.resetBoard(),r.placeRandomShips();for(let e=0;e<10;e++)for(let n=0;n<10;n++)document.querySelector(`.board-field[data-row="${e}"][data-col="${n}"]`).setAttribute("has-ship",r.playerBoard.board[e][n].hasShip?"true":"false");c.hasAttribute("disabled")&&c.toggleAttribute("disabled"),i.hasAttribute("disabled")&&i.toggleAttribute("disabled")})),c.addEventListener("click",(()=>{r.resetBoard();for(let r=0;r<10;r++)for(let e=0;e<10;e++)document.querySelector(`.board-field[data-row="${r}"][data-col="${e}"]`).removeAttribute("has-ship");c.toggleAttribute("disabled"),i.toggleAttribute("disabled")})),o.append(s,c),t.append(o,n("config"),a),e.replaceChildren(),e.appendChild(t)},n=(r,e,n,o,a=!1)=>{const i=document.createElement("div");i.classList.add("board",`${r}-board`),a&&i.toggleAttribute("under-attack");for(let r=0;r<10;r++)for(let s=0;s<10;s++){const c=document.createElement("div");c.classList.add("board-field"),c.setAttribute("data-row",r),c.setAttribute("data-col",s),e&&(c.setAttribute("hit","false"),c.setAttribute("has-ship",e.enemyBoard.board[r][s].hasShip?"true":"false")),a&&c.addEventListener("click",(()=>{o(e,n,[r,s],t)})),i.appendChild(c)}return i},t=(r,e,n,t)=>{const o=document.querySelector(`.${r}-board`),a=document.querySelector(`.${e}-board`);document.querySelector(`.${e}-board .board-field[data-row="${n[0]}"][data-col="${n[1]}"]`).setAttribute("hit","true");for(const r of t)document.querySelector(`.${e}-board .board-field[data-row="${r.row}"][data-col="${r.col}"]`).setAttribute("hit","true");a.toggleAttribute("under-attack"),o.toggleAttribute("under-attack")};return{generateUI:(n,t,o)=>{r.replaceChildren(),r.append((()=>{const r=document.createElement("header"),e=document.createElement("h1");return e.textContent="Okeanos War",r.appendChild(e),r})(),((r,n,t)=>{const o=document.createElement("main"),a=document.createElement("section"),i=document.createElement("section");a.classList.add("main-display"),i.classList.add("controller");const s=document.createElement("button"),c=document.createElement("button");return s.classList.add("reset"),c.classList.add("start"),s.toggleAttribute("disabled"),c.toggleAttribute("disabled"),s.textContent="Reset",c.textContent="Start",s.addEventListener("click",(()=>{r.resetBoard(),n.resetBoard(),e(r),s.toggleAttribute("disabled")})),c.addEventListener("click",(()=>{t(),s.toggleAttribute("disabled"),c.toggleAttribute("disabled")})),i.append(c,s),o.append(a,i),o})(n,t,o),(()=>{const r=document.createElement("footer"),e=document.createElement("small");return e.textContent="Copyright © 2023 VictorEX13",r.appendChild(e),r})()),e(n)},generateBoards:(r,e,t)=>{const o=document.querySelector(".main-display");o.replaceChildren(),o.append(n("player",e,r),n("comp",r,e,t,!0))},endTheGame:r=>{const e=document.querySelector(".main-display"),n=document.createElement("p");n.classList.add("winning-message"),n.textContent=`You ${r}!!!`,e.replaceChildren(),e.appendChild(n)}}},e=()=>{let r=0,e=!1;const n=(()=>{const r=[];for(let e=0;e<10;e++){const n=[];for(let r=0;r<10;r++)n.push({hasShip:!1,hitten:!1,row:e,col:r});r.push(n)}return r})(),t=(r,e)=>{const t=[],o=n[r[0]][r[1]].shipIndex,a=n[r[0]][r[1]].shipOnVertical;let i,s,c,d;a?(c=r[1],d=r[0]-o,d-1>=0&&t.push(n[r[0]-o-1][r[1]]),d+e<10&&t.push(n[r[0]-o+e][r[1]])):(c=r[0],d=r[1]-o,d-1>=0&&t.push(n[r[0]][r[1]-o-1]),d+e<10&&t.push(n[r[0]][r[1]-o+e]));for(let l=-1;l<=e;l++)d+l>=0&&d+l<10&&(a?(i=l-o,s=-1):(i=-1,s=l-o),c-1>=0&&t.push(n[r[0]+i][r[1]+s]),c+1<10&&t.push(n[r[0]+(a?i:Math.abs(i))][r[1]+(a?Math.abs(s):s)]));return t},o=r=>{for(let e=0;e<r.length;e++){const n=Math.floor(Math.random()*r.length);[r[e],r[n]]=[r[n],r[e]]}},a=(r,t)=>{const o=[];for(let a=0;a<t;a++)e&&r[0]+a<10?o.push(n[r[0]+a][r[1]]):!e&&r[1]+a<10&&o.push(n[r[0]][r[1]+a]);return o},i=(r,n)=>!!(a(r,n).every((r=>!(r.hasShip||r.firstNeighbour||r.secondNeighbour||r.thirdNeighbour)))&&r[0]>=0&&r[1]>=0&&(e&&r[0]+n-1<10&&r[1]<10||!e&&r[0]<10&&r[1]+n-1<10));return{get board(){return n},get shipsOnTheBoard(){return r},get placeVertically(){return e},getShipCoordinates:a,getAdjacentSlots:r=>{const e=[];return r[0]-1>=0&&e.push([r[0]-1,r[1]]),r[0]+1<10&&e.push([r[0]+1,r[1]]),r[1]-1>=0&&e.push([r[0],r[1]-1]),r[1]+1<10&&e.push([r[0],r[1]+1]),o(e),e},getPredSuccSlots:r=>{const e=[];if(n[r[0]][r[1]].hasShip){let t=1,o=!1,a=!1,i=0;for(;i<2&&e.length<2;)n[r[0]][r[1]].shipOnVertical?(r[0]-t>=0&&!a?!n[r[0]-t][r[1]].hitten&&e.push([r[0]-t,r[1]])&&(a=!0):i++&&(a=!0),r[0]+t<10&&!o?!n[r[0]+t][r[1]].hitten&&e.push([r[0]+t,r[1]])&&(o=!0):i++&&(o=!0)):(r[1]-t>=0&&!a?!n[r[0]][r[1]-t].hitten&&e.push([r[0],r[1]-t])&&(a=!0):i++&&(a=!0),r[1]+t<10&&!o?!n[r[0]][r[1]+t].hitten&&e.push([r[0],r[1]+t])&&(o=!0):i++&&(o=!0)),t++}return o(e),e},isAValidCoordinate:i,getNeighbourCoordinates:t,placeShip:(o,a)=>{if(i(o,a)){const i=o[0],s=o[1];if(n[i][s].hasShip=!0,n[i][s].ship=(r=>{let e=0;return{shipLength:r,get hits(){return e},hit:()=>{e++},isSunk:()=>r===e}})(a),n[i][s].shipIndex=0,n[i][s].shipOnVertical=e,e)for(let r=1;r<a;r++)n[i+r][s].hasShip=!0,n[i+r][s].ship=n[i][s].ship,n[i+r][s].shipIndex=r,n[i+r][s].shipOnVertical=e;else for(let r=1;r<a;r++)n[i][s+r].hasShip=!0,n[i][s+r].ship=n[i][s].ship,n[i][s+r].shipIndex=r,n[i][s+r].shipOnVertical=e;const c=t(o,a);for(const r of c)r.firstNeighbour?r.secondNeighbour?r.thirdNeighbour=n[i][s].ship:r.secondNeighbour=n[i][s].ship:r.firstNeighbour=n[i][s].ship;r++}},switchShipDirection:()=>{e=!e},receiveAttack:r=>{if(!n[r[0]][r[1]].hitten&&(n[r[0]][r[1]].hitten=!0,n[r[0]][r[1]].hasShip&&(n[r[0]][r[1]].ship.hit(),n[r[0]][r[1]].ship.isSunk()))){const e=n[r[0]][r[1]].ship,t=n.flat().filter((r=>r.firstNeighbour===e||r.secondNeighbour===e||r.thirdNeighbour===e));for(const r of t)r.hitten=!0}},isAllShipsSunk:()=>n.flat().filter((r=>r.ship)).every((r=>r.ship.isSunk()))}},t=(r=!1)=>{let n,t=e(),o=[];const a=()=>[Math.floor(10*Math.random()),Math.floor(10*Math.random())];return{get playerBoard(){return t},get enemyBoard(){return n},resetBoard:()=>{t=e()},setEnemyBoard:r=>{n=r},placeRandomShips:()=>{for(;t.shipsOnTheBoard<10;)Math.random()>=.5&&t.switchShipDirection(),t.placeShip(a(),t.shipsOnTheBoard<4?1:t.shipsOnTheBoard<7?2:t.shipsOnTheBoard<9?3:4)},attack:e=>{if(r){let r,e=!1;for(;!e;){const t=o.length;r=t>0?o.shift():a(),n.board[r[0]][r[1]].hitten||(n.receiveAttack(r),e=!0,n.board[r[0]][r[1]].hasShip&&(o=n.board[r[0]][r[1]].ship.isSunk()?[]:t>0?n.getPredSuccSlots(r):n.getAdjacentSlots(r)))}return r}n.receiveAttack(e)}}};var o=n(379),a=n.n(o),i=n(795),s=n.n(i),c=n(569),d=n.n(c),l=n(565),A=n.n(l),u=n(216),p=n.n(u),h=n(589),f=n.n(h),b=n(756),m={};m.styleTagTransform=f(),m.setAttributes=A(),m.insert=d().bind(null,"head"),m.domAPI=s(),m.insertStyleElement=p(),a()(b.Z,m),b.Z&&b.Z.locals&&b.Z.locals,(()=>{const e=r(),n=t(),o=t(!0),a=()=>{o.placeRandomShips(),n.setEnemyBoard(o.playerBoard),o.setEnemyBoard(n.playerBoard),e.generateBoards(n,o,i)},i=(r,n,t,o)=>{let a=[];r.attack(t),r.enemyBoard.board[t[0]][t[1]].hasShip&&r.enemyBoard.board[t[0]][t[1]].ship.isSunk()&&(a=r.enemyBoard.getNeighbourCoordinates(t,r.enemyBoard.board[t[0]][t[1]].ship.shipLength)),o("player","comp",t,a),r.enemyBoard.isAllShipsSunk()?setTimeout((()=>{e.endTheGame("Win")}),500):setTimeout((()=>{let r=[];const t=n.attack(),[a,i]=t;n.enemyBoard.board[a][i].hasShip&&n.enemyBoard.board[a][i].ship.isSunk()&&(r=n.enemyBoard.getNeighbourCoordinates(t,n.enemyBoard.board[a][i].ship.shipLength)),o("comp","player",t,r),n.enemyBoard.isAllShipsSunk()&&setTimeout((()=>{e.endTheGame("Lose")}),500)}),1e3)};return{renderUI:()=>{e.generateUI(n,o,a)}}})().renderUI()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,